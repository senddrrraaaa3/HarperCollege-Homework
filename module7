#include <iostream>
#include <string>
#include <vector>

#if __has_include(<filesystem>)
    #include <filesystem>
    namespace fs = std::filesystem;
#elif __has_include(<experimental/filesystem>)
    #include <experimental/filesystem>
    namespace fs = std::experimental::filesystem;
#else
    #error "Missing filesystem support"
#endif

void printTree(const fs::path& path, const std::string& prefix = "") {
    if (!fs::exists(path)) return;

    std::vector<fs::directory_entry> entries;

    try {
        for (const auto& entry : fs::directory_iterator(path)) {
            entries.push_back(entry);
        }
    } catch (const std::exception& e) {
        std::cerr << prefix << "⚠️  [Access denied or unreadable folder]\n";
        return;
    }

    for (size_t i = 0; i < entries.size(); ++i) {
        const auto& entry = entries[i];
        bool isLast = (i == entries.size() - 1);

        std::cout << prefix
                  << (isLast ? "└── " : "├── ")
                  << entry.path().filename().string() << std::endl;

        try {
            if (fs::is_directory(entry.path()) && !fs::is_symlink(entry)) {
                printTree(entry.path(), prefix + (isLast ? "    " : "│   "));
            }
        } catch (...) {
            std::cerr << prefix << "    ⚠️  [Could not check subdirectory]\n";
        }
    }
}

int main(int argc, char* argv[]) {
    fs::path startPath = (argc > 1) ? argv[1] : fs::current_path();
    std::cout << startPath.string() << std::endl;

    try {
        printTree(startPath);
    } catch (const std::exception& e) {
        std::cerr << "Fatal error: " << e.what() << std::endl;
        return 1;
    }

    return 0;
}
