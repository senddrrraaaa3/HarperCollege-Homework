#include <iostream>
#include <vector>
#include <random>
#include <chrono>
#include <algorithm>


void naiveShuffle(std::vector<int>& arr) {
    std::random_device rd;
    std::mt19937 gen(rd());

    for (int i = 0; i < arr.size(); ++i) {
        int j = std::uniform_int_distribution<>(0, arr.size() - 1)(gen);
        std::swap(arr[i], arr[j]);
    }
}


void lessNaiveShuffle(std::vector<int>& arr) {
    std::random_device rd;
    std::mt19937 gen(rd());

    for (int i = 0; i < arr.size(); ++i) {
        int j = std::uniform_int_distribution<>(i, arr.size() - 1)(gen);
        std::swap(arr[i], arr[j]);
    }
}


void fisherYatesShuffle(std::vector<int>& arr) {
    std::random_device rd;
    std::mt19937 gen(rd());

    for (int i = arr.size() - 1; i > 0; --i) {
        int j = std::uniform_int_distribution<>(0, i)(gen);
        std::swap(arr[i], arr[j]);
    }
}


template <typename Function>
void benchmark(const std::string& name, Function shuffle, int size, int trials) {
    using namespace std::chrono;

    
    std::vector<int> original(size);
    for (int i = 0; i < size; ++i) {
        original[i] = i;
    }

    
    auto start = high_resolution_clock::now();

    for (int t = 0; t < trials; ++t) {
        std::vector<int> copy = original;
        shuffle(copy); 
    }

    auto end = high_resolution_clock::now();
    duration<double, std::milli> elapsed = end - start;

    
    std::cout << name << " | Size: " << size
              << " | Trials: " << trials
              << " | Time: " << elapsed.count() << " ms\n";
}


int main() {
    std::vector<int> sizes = {10, 100, 1000, 10000};
    int trials = 4;

    for (int size : sizes) {
        std::cout << "\n--- Testing array size: " << size << " ---\n";
        benchmark("Naive Shuffle", naiveShuffle, size, trials);
        benchmark("Less Naive Shuffle", lessNaiveShuffle, size, trials);
        benchmark("Fisher-Yates Shuffle", fisherYatesShuffle, size, trials);
    }

    return 0;
}
